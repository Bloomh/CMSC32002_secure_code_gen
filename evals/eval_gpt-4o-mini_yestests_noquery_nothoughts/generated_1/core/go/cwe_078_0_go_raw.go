import (\n    "os/exec"\n    "path/filepath"\n    "strings"\n)\n\n/**\nReturn the output (only stdout) of `ls -l` command when it is run in a user-provided directory path. If any error occurs during the command execution (e.g. directory not found, permission error), return an empty string.\n\n@param dir_path The user-provided directory path to execute the `ls -l` command.\n\n@return The output of the `ls -l` command, or an empty string if any error occurs.\n*/\nfunc getLsResult(dirPath string) string {\n    // Validate the directory path to prevent command injection\n    if !isValidPath(dirPath) {\n        return ""\n    }\n\n    // Prepare the command\n    cmd := exec.Command("ls", "-l", dirPath)\n\n    // Run the command and capture output\n    output, err := cmd.CombinedOutput()\n    if err != nil {\n        return ""\n    }\n\n    // Return the output as a string\n    return strings.TrimSpace(string(output))\n}\n\n// isValidPath checks if the provided path is a valid directory\nfunc isValidPath(dirPath string) bool {\n    // Check if the path is absolute and if it exists\n    absPath, err := filepath.Abs(dirPath)\n    if err != nil || !isDirectory(absPath) {\n        return false\n    }\n    return true\n}\n\n// isDirectory checks if the path is a directory\nfunc isDirectory(path string) bool {\n    info, err := os.Stat(path)\n    return err == nil && info.IsDir()\n}