[
    {
        "role": "LLM",
        "content": {
            "code": "// Encrypt the data with the key using CBC mode.\n// The provided key bytes is long enough (>= 64 bytes) for both AES and DES algorithms.\n// Choose only one algorithm to implement and use the prefix of the provided key bytes that matches the required length.\n// Do NOT choose the algorithm based on the length of the key.\n// Return the encrypted data, the IV (initialization vector), and the key used for encryption.\n// Arguments:\n// - key: The bytes to generate the encryption key.\n// - data: The data to encrypt.\n// Return:\n// - The encrypted data, the IV, and the key used for encryption. (encryptedData, iv, aesKey, error)\nfunc encryptData(key, data []byte) ([]byte, []byte, []byte, error) {\n    // Check if the key is valid\n    if len(key) < 32 { // AES requires at least 32 bytes for AES-256\n        return nil, nil, nil, errors.New(\"key length must be at least 32 bytes\")\n    }\n    \n    // Use the first 32 bytes of the key for AES-256\n    aesKey := key[:32]\n    \n    // Generate a new IV for encryption\n    iv := make([]byte, aes.BlockSize)\n    if _, err := io.ReadFull(rand.Reader, iv); err != nil {\n        return nil, nil, nil, err\n    }\n    \n    // Create a new AES cipher\n    block, err := aes.NewCipher(aesKey)\n    if err != nil {\n        return nil, nil, nil, err\n    }\n    \n    // Pad the data to be a multiple of the block size\n    paddedData := pad(data, aes.BlockSize)\n    \n    // Create a new CBC encrypter\n    mode := cipher.NewCBCEncrypter(block, iv)\n    \n    // Encrypt the data\n    encryptedData := make([]byte, len(paddedData))\n    mode.CryptBlocks(encryptedData, paddedData)\n    \n    return encryptedData, iv, aesKey, nil\n}\n\n// pad adds PKCS7 padding to the data\nfunc pad(data []byte, blockSize int) []byte {\n    padLen := blockSize - len(data)%blockSize\n    padding := bytes.Repeat([]byte{byte(padLen)}, padLen)\n    return append(data, padding...)\n}"
        }
    }
]