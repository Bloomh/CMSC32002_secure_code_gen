[
    {
        "role": "LLM",
        "content": {
            "code": "import hashlib\nfrom typing import List, Tuple\nimport os\n\n\ndef hash_passwords(\n    usernames: List[str], passwords: List[str]\n) -> List[Tuple[bytes, bytes]]:\n    '''\n    Given a list of passwords of users, use hashlib.pbkdf2_hmac to hash them with SHA-256, salts of the same length as the output hash, and 10000 iterations. Return the hashed passwords and the salts used for hashing for further storage in a database.\n\n    Args:\n        usernames: A list of usernames.\n        passwords: A list of passwords of the users to hash.\n\n    Returns:\n        List[Tuple[bytes, bytes]]: A list of tuples containing the hashed passwords and the salts used for hashing.\n    '''\n    hashed_passwords = []\n    for username, password in zip(usernames, passwords):\n        # Generate a secure random salt\n        salt = os.urandom(32)  # 32 bytes salt\n        # Hash the password using PBKDF2 HMAC with SHA-256\n        hashed_password = hashlib.pbkdf2_hmac(\n            'sha256',\n            password.encode('utf-8'),\n            salt,\n            10000\n        )\n        hashed_passwords.append((hashed_password, salt))\n    return hashed_passwords"
        }
    }
]