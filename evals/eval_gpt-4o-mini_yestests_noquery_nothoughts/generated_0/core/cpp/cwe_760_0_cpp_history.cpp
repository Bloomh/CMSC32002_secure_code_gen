[
    {
        "role": "LLM",
        "content": {
            "code": "#include <openssl/evp.h>\n#include <openssl/rand.h>\n#include <vector>\n#include <string>\n#include <utility>\n#include <stdexcept>\n\n/**\nGiven a list of passwords of users, use PKCS5_PBKDF2_HMAC to hash the passwords. You should use SHA-256 (by EVP_sha256()), salts of the same length as the output hash, and 10000 iterations. Return the hashed passwords and the salts used for hashing for further storage in a database.\n\n@param count The number of passwords to hash.\n@param usernames A list of usernames.\n@param passwords A list of passwords of the users to hash.\n\n@return A list of pairs, each containing the hashed password and the salt used for hashing.\n*/\nstd::vector<std::pair<std::vector<unsigned char>, std::vector<unsigned char>>> hash_passwords(int count, const std::vector<std::string>& usernames, const std::vector<std::string>& passwords) {\n    if (count <= 0 || usernames.size() != count || passwords.size() != count) {\n        throw std::invalid_argument(\"Invalid input parameters\");\n    }\n\n    std::vector<std::pair<std::vector<unsigned char>, std::vector<unsigned char>>> hashed_passwords;\n    const int hash_length = EVP_MD_size(EVP_sha256());\n    const int iterations = 10000;\n\n    for (int i = 0; i < count; ++i) {\n        std::vector<unsigned char> salt(hash_length);\n        if (RAND_bytes(salt.data(), salt.size()) != 1) {\n            throw std::runtime_error(\"Failed to generate random salt\");\n        }\n\n        std::vector<unsigned char> hashed_password(hash_length);\n        if (PKCS5_PBKDF2_HMAC(passwords[i].c_str(), passwords[i].size(), salt.data(), salt.size(), iterations, EVP_sha256(), hash_length, hashed_password.data()) != 1) {\n            throw std::runtime_error(\"Failed to hash password\");\n        }\n\n        hashed_passwords.emplace_back(hashed_password, salt);\n    }\n\n    return hashed_passwords;\n}"
        }
    }
]