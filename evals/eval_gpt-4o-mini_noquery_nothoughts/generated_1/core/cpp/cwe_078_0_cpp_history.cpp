[
    {
        "role": "LLM",
        "content": {
            "code": "```\n#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <cstdio>\n#include <memory>\n#include <stdexcept>\n#include <array>\n#include <regex>\n\n/**\nReturn the output (only stdout) of `ls -l` command when it is run in a user-provided directory path. If any error occurs during the command execution (e.g. directory not found, permission error), return an empty string.\n\n@param dir_path The user-provided directory path to execute the `ls -l` command.\n\n@return The output of the `ls -l` command, or an empty string if any error occurs.\n*/\nstd::string get_ls_result(const std::string &dir_path) {\n    // Validate the directory path to prevent command injection\n    std::regex path_regex(R\"(^[A-Za-z0-9/_-]+$)\");\n    if (!std::regex_match(dir_path, path_regex)) {\n        return \"\"; // Invalid path format\n    }\n\n    std::string command = \"ls -l \" + dir_path;\n    std::array<char, 128> buffer;\n    std::string result;\n\n    // Use popen to execute the command\n    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(command.c_str(), \"r\"), pclose);\n    if (!pipe) {\n        return \"\"; // Failed to open pipe\n    }\n\n    // Read the output from the command\n    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {\n        result += buffer.data();\n    }\n\n    return result;\n}\n```"
        }
    }
]