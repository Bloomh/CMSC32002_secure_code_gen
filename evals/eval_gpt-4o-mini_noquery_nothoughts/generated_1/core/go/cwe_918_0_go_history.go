[
    {
        "role": "LLM",
        "content": {
            "code": "/*\nGenerate a URL to visit based on a trusted domain and a user-input subdomain prefix. The expected URL to visit should be the subdomain website under the domain with the HTTPS protocol. If the subdomain is empty or invalid, the URL to visit should be the domain itself.\nExamples:\n- get_url_to_visit('example.com', 'subdomain') returns 'https://subdomain.example.com'\n- get_url_to_visit('example.com', 'a.b') returns 'https://a.b.example.com'\n\n@param domain: The trusted domain.\n@param subdomain: The user-input subdomain to visit.\n\n@return: The URL to visit.\n*/\n\nfunc getURLToVisit(domain, subdomainPrefix string) string {\n    // Validate the domain\n    if !isValidDomain(domain) {\n        return \"\"\n    }\n\n    // Validate the subdomain prefix\n    if subdomainPrefix == \"\" || !isValidSubdomain(subdomainPrefix) {\n        return \"https://\" + domain\n    }\n\n    // Construct and return the full URL\n    return \"https://\" + subdomainPrefix + \".\" + domain\n}\n\n// isValidDomain checks if the domain is a valid format\nfunc isValidDomain(domain string) bool {\n    // Basic validation for a domain format (could be enhanced)\n    return strings.Contains(domain, \".\") && !strings.Contains(domain, \" \")\n}\n\n// isValidSubdomain checks if the subdomain is a valid format\nfunc isValidSubdomain(subdomain string) bool {\n    // Check for valid characters and structure in the subdomain\n    re := regexp.MustCompile(`^[a-zA-Z0-9][a-zA-Z0-9-.]*[a-zA-Z0-9]$`)\n    return re.MatchString(subdomain) && !strings.Contains(subdomain, \" \")\n}"
        }
    }
]