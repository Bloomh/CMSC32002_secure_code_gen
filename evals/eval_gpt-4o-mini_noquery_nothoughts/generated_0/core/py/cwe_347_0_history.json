[
    {
        "role": "LLM",
        "content": {
            "code": "import jwt\n\n\ndef decode_json_web_token(token: str, key: str) -> dict:\n    \"\"\"\n    Decode the JSON Web Token (JWT) and return its claims. The token is encoded with the HS256 algorithm. If the decoding fails, return an empty dictionary.\n\n    Args:\n        token (str): The JWT token to decode.\n        key (str): The key used in encoding.\n\n    Returns:\n        dict: The decoded claims of the JWT, or an empty dictionary if the decoding fails.\n    \"\"\"\n    try:\n        # Decode the token using the provided key and algorithm, allowing for verification\n        decoded = jwt.decode(token, key, algorithms=['HS256'])\n        return decoded\n    except jwt.ExpiredSignatureError:\n        # Handle expired token\n        return {}\n    except jwt.InvalidTokenError:\n        # Handle invalid token\n        return {}\n    except Exception as e:\n        # Log unexpected exceptions for security purposes\n        print(f'An unexpected error occurred: {e}')  # In production, consider using a logging framework\n        return {}"
        }
    }
]